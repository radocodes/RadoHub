@model RadoHub.ViewModels.CookingRecipes.UpdateRecipeViewModel
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment hostingEnv
@{
    string envDir;

    if (hostingEnv.EnvironmentName == "Development")
    {
        envDir = "stage";
    }
    else
    {
        envDir = "production";
    }

    ViewData["Title"] = "Update existing cooking recipe";
}

<div class="admin-cooking-recipe">
    <div class="update-recipe">

        <header class="title text-center">
            <div>
                <h1 class="">@ViewData["Title"]</h1>
                <img src="~/images/@envDir/cookingRecipes/@Model.Id/coverImage/@Model.CoverImageFileName" style="width:15%;" />
            </div>
        </header>

        <section class="create-form">
            <div class="container">
                <form method="post" enctype="multipart/form-data">
                    <div asp-validation-summary="All" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="@Model.Title">Title</label>
                        <input type="text" class="form-control" asp-for="@Model.Title">
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.ShortDescription">Short Description</label>
                        <textarea type="text" class="form-control" asp-for="@Model.ShortDescription" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.ExecutingTime">Executing Time</label>
                        <input type="time" class="form-control" asp-for="@Model.ExecutingTime" style="width:20%">
                    </div>
                    <div class="form-group products-form">
                        <label asp-for="@Model.Products">Products</label>
                        <div class="form-row align-items-center">
                            <div class="col-auto">
                                <input type="text" class="form-control" id="product-input">
                                <input type="hidden" class="form-control" id="products-array" asp-for="@Model.Products">
                            </div>
                            <div class="col-auto">
                                <div class="btn btn-success" id="add-product">+</div>
                            </div>
                        </div>
                        <div id="added-products">
                            @if (Model.ProductsToUpdate != null)
                            {
                                var index = 1;

                                @foreach (var product in Model.ProductsToUpdate)
                                {
                                    <span class="products" id="product-@index">@product</span> <span class="btn btn-light remove-product-btn" id="product-remove-btn-@index" style="color:red">x</span>
                                    <br />
                                    index++;
                                }
                            }
                        </div>

                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.Content">Content</label>
                        <textarea type="text" class="form-control" asp-for="@Model.Content" rows="10"></textarea>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.CoverImage">Cover Image</label>
                        <input type="file" class="form-control-file" asp-for="@Model.CoverImage">
                        <input type="hidden" class="form-control" asp-for="@Model.CoverImageFileName">
                    </div>
                    <div class="form-group hashtags-form">
                        <label asp-for="@Model.Hashtags">Hashtags</label>
                        <div class="form-row align-items-center">
                            <div class="col-auto">
                                <input type="text" class="form-control" id="hashtag-input">
                                <input type="hidden" class="form-control" id="hashtags-array" asp-for="@Model.Hashtags">
                            </div>
                            <div class="col-auto">
                                <div class="btn btn-success" id="add-hashtag">+</div>
                            </div>
                        </div>
                        <div id="added-hashtags">
                            @if (Model.HashtagsToUpdate != null)
                            {
                                var index = 1;

                                @foreach (var hashtag in Model.HashtagsToUpdate)
                                {
                                    <span class="hashtags" id="hashtag-@index">@hashtag</span> <span class="btn btn-light remove-hashtag-btn" id="hashtag-remove-btn-@index" style="color:red">x</span>
                                    <br />
                                    index++;
                                }
                            }
                        </div>
                    </div>

                    <button class="btn btn-primary">Update recipe</button>
                </form>
            </div>
        </section>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {

        // Add Product function
        let addProduct = () => {
            $(document).on("click", "#add-product", () => {

                let product = $("#product-input").val();

                if (product != null) {
                    recipeProducts.push(product);

                    $("#products-array").val(recipeProducts);

                    console.log(`Added product: ${product}`);

                    $("#added-products").append(`<span class="products" id="product-${recipeProducts.length}">${product}</span> <span class="btn btn-light remove-product-btn" id="product-remove-btn-${recipeProducts.length}" style="color:red">x</span><br />`);

                    $("#product-input").val("");
                }
                else {
                    console.log('Product adding failed!');
                }
            })
        }

        // Remove Product function
        let removeProduct = () => {
            $(document).on("click", ".remove-product-btn", (eventHendler) => {
                let removeBtnIdPrefix = "product-remove-btn-";
                let removeProductButtonId = eventHendler.target.id;
                let productNumber = removeProductButtonId.slice(removeBtnIdPrefix.length)
                let productId = `product-${productNumber}`;

                let prodToRemove = document.getElementById(productId).innerHTML;

                if (recipeProducts.length > 0) {
                    for (var i = 0; i < recipeProducts.length; i++) {
                        if (recipeProducts[i] === prodToRemove) {
                            recipeProducts.splice(i, 1);
                        }
                    }
                }

                if (recipeProducts.length === 0) {
                    $("#products-array").val(null);
                }
                else {
                    $("#products-array").val(recipeProducts);
                }

                document.getElementById("added-products").remove();
                $(".products-form").append(`<div id="added-products"></div>`);

                if (recipeProducts.length > 0) {
                    for (var i = 0; i < recipeProducts.length; i++) {
                        $("#added-products").append(`<span class="products" id="product-${(i + 1)}">${recipeProducts[i]}</span> <span class="btn btn-light remove-product-btn" id="product-remove-btn-${(i + 1)}" style="color:red">x</span><br />`);
                    }
                }
            });
        }

        // Add Hashtag function
        let addHashtag = () => {
            $(document).on("click", "#add-hashtag", () => {

                let hashtag = $("#hashtag-input").val();

                if (hashtag != null) {
                    allHashtags.push(hashtag);

                    $("#hashtags-array").val(allHashtags);

                    console.log(`Added hashtag: ${hashtag}`);

                    $("#added-hashtags").append(`<span class="hashtags" id="hashtag-${allHashtags.length}">${hashtag}</span> <span class="btn btn-light remove-hashtag-btn" id="hashtag-remove-btn-${allHashtags.length}" style="color:red">x</span><br />`);

                    $("#hashtag-input").val("");
                }
                else {
                    console.log('Hashtag adding failed!');
                }
            })
        }

        // Remove Hashtag function
        let removeHashtag = () => {
            $(document).on("click", ".remove-hashtag-btn", (eventHendler) => {
                let removeBtnIdPrefix = "hashtag-remove-btn-";
                let removeHashtagButtonId = eventHendler.target.id;
                let hashtagNumber = removeHashtagButtonId.slice(removeBtnIdPrefix.length)
                let hashtagId = `hashtag-${hashtagNumber}`;

                let hashtagToRemove = document.getElementById(hashtagId).innerHTML;

                if (allHashtags.length > 0) {
                    for (var i = 0; i < allHashtags.length; i++) {
                        if (allHashtags[i] === hashtagToRemove) {
                            allHashtags.splice(i, 1);
                        }
                    }
                }

                if (allHashtags.length === 0) {
                    $("#hashtags-array").val(null);
                }
                else {
                    $("#hashtags-array").val(allHashtags);
                }

                document.getElementById("added-hashtags").remove();
                $(".hashtags-form").append(`<div id="added-hashtags"></div>`);

                if (allHashtags.length > 0) {
                    for (var i = 0; i < allHashtags.length; i++) {
                        $("#added-hashtags").append(`<span class="hashtags" id="hashtag-${(i + 1)}">${allHashtags[i]}</span> <span class="btn btn-light remove-hashtag-btn" id="hashtag-remove-btn-${(i + 1)}" style="color:red">x</span><br />`);
                    }
                }
            });
        }

        // Prepare Products
        let productsCount = $(".products").length;
        let recipeProducts = new Array();

        for (var i = 0; i < productsCount; i++) {
            let currProduct = document.getElementById(`product-${i + 1}`).innerHTML;
            recipeProducts.push(currProduct);
        }

        $("#products-array").val(recipeProducts);

        // Prepare Hashtags 
        let hashtagsCount = $(".hashtags").length;
        let allHashtags = new Array();

        for (var i = 0; i < hashtagsCount; i++) {
            let currHashtag = document.getElementById(`hashtag-${i + 1}`).innerHTML;
            allHashtags.push(currHashtag);
        }

        $("#hashtags-array").val(allHashtags);

        // Functions calling
        addProduct();
        addHashtag();
        removeProduct();
        removeHashtag();
    });
</script>